# pygame template

import pygame
from pygame.locals import K_ESCAPE, KEYDOWN, QUIT, K_RIGHT, K_LEFT
import random

pygame.init()
pygame.font.init()

# Import players (Waddle Dee [P1] and Kirby [P2])
DEFAULT_CHAR_SIZE = (100, 100)
DEFAULT_BALL_SIZE = (60, 60)

def load_characters(DEFAULT_CHAR_SIZE: list):
    P1 = pygame.image.load('WaddleP1.png')
    P1 = pygame.transform.scale(P1, DEFAULT_CHAR_SIZE)
    P2 = pygame.image.load('KirbyP2.png')
    P2 = pygame.transform.scale(P2, DEFAULT_CHAR_SIZE)
    P2 = pygame.transform.rotate(P2, 275)  # 290 degrees
    return P1, P2

# Import targets
def load_targets(DEFAULT_BALL_SIZE: list):
    kirby_target = pygame.image.load('kirball.png')
    kirby_target = pygame.transform.scale(kirby_target, DEFAULT_BALL_SIZE)

    waddle_target = pygame.image.load('Waddleball.png')
    waddle_target = pygame.transform.scale(waddle_target, DEFAULT_BALL_SIZE)
    return kirby_target, waddle_target

# Set Display Size
def set_display():
    width = 640
    height = 480
    SIZE = (width, height)
    all_screens = pygame.display.set_mode(SIZE)
    return width, height, all_screens

def backgrounds():
    game_bg = pygame.image.load('Game_bg.png')
    return game_bg

clock = pygame.time.Clock()

# ---------------------------
# Initialize global variables
def set_font():
    large_font = pygame.font.SysFont('Arial', 50)
    small_font = pygame.font.SysFont('Arial', 30)
    return large_font, small_font
current_screen = 0

# Headings and Player Options
def options(title: str, font, position: list):
    option = font.render(title, True, (255, 255, 255))
    option_rect = option.get_rect(topleft=(position))
    return option, option_rect

pause_rect = pygame.Rect(600, 30, 23, 25)
pause_rect_pressed = False
def targets(font):
    inc_targets = pygame.Rect(80, 100, 300, 100)
    inc_targets_text = font.render("+", True, (128, 128, 128))
    dec_targets = pygame.Rect(50, 100, 300, 100)
    dec_targets_text = font.render('-', True, (128, 128, 128))
    return inc_targets, inc_targets_text, dec_targets, dec_targets_text
# Control speed and location of targets
kirby_x = 400
kirby_y = random.randrange(50, 400)
kirby_speed_x = 8
kirby_speed_y = 8
waddle_x = 200
waddle_y = random.randrange(50, 400)
waddle_speed_x = 8
waddle_speed_y = 8

# Set both players at center
p1_x_position = 240
p2_x_position = 240

waddle_pts = [(300, 120), (280, 75), (320, 75)]
x1 = 300    # Waddle Dee's dart points
y1 = 120
x2 = 280
y2 = 75
x3 = 320
y3 = 75

kirby_pts = [(300, 380), (280, 425), (320, 425)]
x4 = 300    # Kirby's dart points
y4 = 380
x5 = 280
y5 = 425
x6 = 320
y6 = 425

dart_speed = 8

# Customizable attributes in Settings
count = 0
ball_number = []
speed = 2

# Initialize Timer Variables
timer_seconds = 5 * 60
current_time = pygame.time.get_ticks()
countdown_timer = timer_seconds * 1000

# Score
score = 0
score_increment = 10
# ---------------------------
def main():
running = True
while running:
    # EVENT HANDLING
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN:
            if play_rect.collidepoint(event.pos):
                current_screen += 2
            elif settings_rect.collidepoint(event.pos):
                current_screen += 1
            elif pause_rect.collidepoint(event.pos):
                pause_rect_pressed = True
                current_screen += 1
                pause_rect_pressed = False
                if quit_rect.collidepoint(event.pos):
                    current_screen -= 3
                elif resume_rect.collidepoint(event.pos):
                    current_screen -= 1
            elif instructions_rect.collidepoint(event.pos):
                current_screen += 4
                # if option_3_rect.collidepoint(event.pos):
                    # current_screen -= 2
            print(current_screen)
            if more_targets.collidepoint(event.pos):
                ball_number.append(1)
                count += 1
            elif less_targets.collidepoint(event.pos):
                ball_number.remove(1)
                count += 1
            print(count)
        elif event.type == QUIT:
            running = False
    p1, p2 = load_characters([100, 100])                # calling player 1 and 2
    kirby_ball, waddle_ball = load_targets([60, 60])    # calling imported targets
    WIDTH, HEIGHT, screen = set_display()
    background = backgrounds()                          # setting game background
    scene_title_font, text_font = set_font()            # calling fonts
    play, play_rect = options("Play", scene_title_font, [20, 50])
    settings, settings_rect = options("Settings", scene_title_font, [20, 150]) 
    # no option 3
    resume, resume_rect = options("Resume", scene_title_font, [170, 100])
    quit, quit_rect = options("Quit", scene_title_font, [170, 200])
    instructions, instructions_rect = options("Instructions", scene_title_font, [20, 100])

    more_targets, more_targets_text, less_targets, less_targets_text = targets(scene_title_font)
    # GAME STATE UPDATES
    # All game math and comparisons happen here
    keys = pygame.key.get_pressed()

    # P1 Movements (Waddle Dee)
    if keys[97] == True and p1_x_position > 0:    # a
        p1_x_position -= 10
        x1 -= 10
        x2 -= 10
        x3 -= 10

    if keys[100] == True and p1_x_position < WIDTH:    # d
        p1_x_position += 10
        x1 += 10
        x2 += 10
        x3 += 10

    # P2 Movements (Kirby)
    if keys[1073741904] == True and p2_x_position > 0:    # left arrow
        p2_x_position -= 10
        x4 -= 10
        x5 -= 10
        x6 -= 10
    if keys[1073741903] == True and p2_x_position < WIDTH:    # right arrow
        p2_x_position += 10
        x4 += 10
        x5 += 10
        x6 += 10

    # Kirby Target
    if kirby_x + DEFAULT_BALL_SIZE[0] >= WIDTH or kirby_x - DEFAULT_BALL_SIZE[0] <= 0:
        kirby_speed_x *= -1

    if kirby_y + DEFAULT_BALL_SIZE[0] > 400 or kirby_y - DEFAULT_BALL_SIZE[0] < 80:
        kirby_speed_y *= -1

    kirby_x += kirby_speed_x
    kirby_y += kirby_speed_y

    # Waddle Dee Target
    if waddle_x + DEFAULT_BALL_SIZE[0] >= WIDTH or waddle_x - DEFAULT_BALL_SIZE[0] <= 0:
        waddle_speed_x *= -1

    if waddle_y + DEFAULT_BALL_SIZE[0] > 400 or waddle_y - DEFAULT_BALL_SIZE[0] < 80:
        waddle_speed_y *= -1

    waddle_x += waddle_speed_x
    waddle_y += waddle_speed_y

    # Firing Darts
    if keys[119] == True:    # w
        y1 += dart_speed
        y2 += dart_speed
        y3 += dart_speed

    if keys[1073741906] == True:    # up arrow
        y4 -= dart_speed
        y5 -= dart_speed
        y6 -= dart_speed

    # Timer (taken from ChatGPT)
    elapsed_time = pygame.time.get_ticks() - current_time
    remaining_time = max(timer_seconds - int(elapsed_time / 1000), 0)
    minutes = remaining_time // 60
    seconds = remaining_time % 60
    timer_text = text_font.render(f"Time: {minutes:02d}:{seconds:02d}", True, (0, 0, 0))

    # if elapsed_time >= countdown_timer:
    #     current_screen = 5
    #     break
    # Point system
    # if kirby_pts.colliderect(kirby_ball):

        # if bullet hits red balls, red_points += 10
        # if bullet hits blue balls, blue_points += 10
        # if bullet hits opponent, player hit freezes for 2 seconds
    # if red_points > blue_points:
    #     winner = "Player 1"
    # elif blue_points > red_points:
    #     winner = "Player 2"

    # DRAWING

    if current_screen == 0:
        # Scene 1 (Menu screen)
        screen.fill((0, 0, 128))  # always the first drawing command
        scene_title = scene_title_font.render('Menu Screen', True, (255, 255, 255))
        screen.blit(scene_title, (0, 0))
        screen.blit(play, (20, 50))
        screen.blit(instructions, (20, 100))
        screen.blit(settings, (20, 150))
        # ADD BACKGROUND

    elif current_screen == 1:
        # Scene 2 (Settings screen)
        screen.fill((128, 0, 0)) 
        scene_title = scene_title_font.render('Settings', True, (255, 255, 255))
        screen.blit(scene_title, (0, 0))
        target_description = text_font.render('Number of targets per player', True, (255, 255, 255))
        count_of_balls = text_font.render(str(count), True, (255, 255, 255))
        screen.blit(target_description, (25, 100))
        screen.blit(count_of_balls, (240, 150))
        screen.blit(more_targets_text, (275, 130))
        screen.blit(less_targets_text, (195, 130))

        # MISSING CUSTOMIZATION OPTIONS (SPEED & NUMBER OF BALLS)
        # ALSO ADD THE X BUTTON TO RETURN TO MENU

    elif current_screen == 2:
        # Scene 3 (Game)
        screen.fill((255, 255, 255))  # always the first drawing command
        screen.blit(background, (0, 0))
        pygame.draw.rect(screen, (0, 0, 0), (600, 30, 8, 25))    # Pause button
        pygame.draw.rect(screen, (0, 0, 0), (615, 30, 8, 25))
        screen.blit(timer_text, (460, 75))
        screen.blit(p1, (p1_x_position, 0))
        pygame.draw.polygon(screen, (255, 0, 0), [(x1, y1), (x2, y2), (x3, y3)], width = 0)
        screen.blit(p2, (p2_x_position, 400))
        pygame.draw.polygon(screen, (255, 0, 0), [(x4, y4), (x5, y5), (x6, y6)], width = 0)
        screen.blit(kirby_ball, (kirby_x, kirby_y))
        screen.blit(waddle_ball, (waddle_x, waddle_y))
# MISSING POINTS DISPLAY, TIMER, PLAYERS, AND BULLETS

    elif current_screen == 3:
        # Scene 4 (Pause screen)
        screen.fill((128, 0, 0)) 
        scene_title = scene_title_font.render('Game Paused', True, (255, 255, 255))
        screen.blit(scene_title, (170, 100))
        screen.blit(resume, (170, 150))
        screen.blit(quit, (170, 200))
        # NEED TO FIX FORMAT and PLACEMENT

    elif current_screen == 4:
        # Scene 5 (Instructions)
        screen.fill((0, 0, 0))
        scene_title = scene_title_font.render('Instructions', True, (255, 255, 255))
        description = text_font.render('This is a 2 player game. Player 1 will', True, (255, 255, 255))
        description_2 = text_font.render('use the keys A (to move left),W (to ', True, (255, 255, 255))
        description_3 = text_font.render('shoot RED balls), and D (to move right).', True, (255, 255, 255))
        description_4 = text_font.render('Player 2 will use arrow keys (left', True, (255, 255, 255))
        description_5 = text_font.render('and right to move, up to shoot YELLOW', True, (255, 255, 255))
        description_6 = text_font.render('balls). If players shoot the wrong color,', True, (255, 255, 255))
        description_7 = text_font.render('their opponent will recieve 10 points.', True, (255, 255, 255))
        description_8 = text_font.render("If player gets hit by opponents' dart,", True, (255, 255, 255)) 
        description_9 = text_font.render('player will freeze for 2 seconds. Collect', True, (255, 255, 255)) 
        description_10 = text_font.render('the most points to win! Good luck!', True, (255, 255, 255))

        # pygame.draw.rect(screen, (0, 0, 0), option_3_rect)
        # screen.blit(option_3, (170, 400))
        screen.blit(scene_title, (25, 50))
        screen.blit(description, (25, 100))
        screen.blit(description_2, (25, 130))
        screen.blit(description_3, (25, 160))
        screen.blit(description_4, (25, 190))
        screen.blit(description_5, (25, 220))
        screen.blit(description_6, (25, 250))
        screen.blit(description_7, (25, 280))
        screen.blit(description_8, (25, 310))
        screen.blit(description_9, (25, 340))
        screen.blit(description_10, (25, 370))

    # elif current_screen == 5:
    #     # Scene 6 (Winner)
    #     screen.fill((255, 223, 0))
    #     scene_title = scene_title_font.render(winner, True, (0, 0, 0))
    #     scene_title_2 = scene_title_font.render("WINS", True, (0, 0, 0))
    #     screen.blit(scene_title, (240, 200))
    #     screen.blit(scene_title_2, (240, 250))

    # Must be the last two lines
    # of the game loop
    pygame.display.flip()
    clock.tick(30)
    #---------------------------


pygame.quit()
